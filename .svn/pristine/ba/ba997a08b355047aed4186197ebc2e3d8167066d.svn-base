package com.bdv.infi.model.conciliacion;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import java.io.File;
import java.io.IOException;
//import java.nio.file.FileSystems;
//import java.nio.file.Files;
//import java.nio.file.Path;
//import java.nio.file.StandardCopyOption;

import javax.sql.DataSource;

import megasoft.AppProperties;
import megasoft.Logger;
import megasoft.db;

import com.bdv.infi.dao.ParametrosDAO;
import com.bdv.infi.logic.interfaces.ConstantesGenerales;
import com.bdv.infi.logic.interfaces.ParametrosSistema;
import com.bdv.infi.util.FileUtil;

/**
 * Conciliar archivos de terceros para luego hallar diferencias externas, luego comparar la estructura con moneda extrajera(INFI)
 * 
 * @author nm11383
 */
public class Conciliacion {

	List<String> lstBcv;
	List<String> lstBdv;
	List<String> lstMe;

	List<String> lstDiferencia = new ArrayList<String>();
	List<String> lstIguales = new ArrayList<String>();
	boolean generarArchivo = false;
	boolean intentosComparacion = true;
	protected HashMap<String, String> parametrosMenudeBCV;
	protected Archivo archivo;
	public String Fecha = "";

	public Conciliacion() {
		this.archivo = new Archivo();
	}

	public void CargarDiferencia() {
		if (!this.archivo.VerificarGenerico("D:/pruebaConciliacion/diferencia/diferencia")) { // Verificar Existencia Archivo
			System.out.println("Archivo no exite");
			BCV Bcv = new BCV();
			ME Me = new ME();
			Bcv.start(); // iniciando los hilos
			Me.start();
			while (Bcv.isAlive() || Me.isAlive()) {
				// Esperando Finalizar
			}
			this.lstBcv = Bcv.Lista();
			this.lstMe = Me.Lista();
			System.out.println("lstMe : " + lstMe.get(0));

			generarArchivo = true;
			Diferencia(lstBcv, lstMe);
		} else {
			try {
				this.lstDiferencia = this.archivo.ListadoGenerico("D:/pruebaConciliacion/diferencia/diferencia");

				this.impimirLista(this.lstDiferencia);
				this.impimirLista(this.lstIguales);
			} catch (Exception e) {
				System.out.println(" Falla en el listado diff : " + e.toString());
			}

			// Cargar (this.lstDiferencia) Lista de Archivo e ir a conciliar
		}

	}

	public void impimirLista(List<String> lst) {
		int cant = lst.size();
		System.out.println("Cantidad de elemento en el archivo : " + cant);
		for (int i = 0; i < cant; i++) {
			System.out.println(lst.get(i));
		}
	}

	/**
	 * Evalua el tamaño de las listas para establecer el orden de lectura en la matriz I,J
	 * 
	 * @param XH
	 *            List<String>
	 * @param XI
	 *            List<String>
	 */
	public void Diferencia(List<String> XH, List<String> XI) {
		int a = XH.size();
		int b = XI.size();

		if (a > b) {
			execComparacion(XI, XH, b, a);
		} else {
			execComparacion(XH, XI, a, b);
		}
	}

	/**
	 * Permite ejecutar las comparaciones de los arreglos teniendo en cuenta el mayor de los dos al mismo tiempo que crea una lista de diferencia y de iguales
	 * 
	 * @param min
	 *            List<String>
	 * @param max
	 *            List<String>
	 * @param iCant
	 *            int
	 * @param jCant
	 *            int
	 */
	public void execComparacion(List<String> min, List<String> max, int iCant, int jCant) {
		this.lstDiferencia = new ArrayList<String>();
		for (int i = 0; i < iCant; i++) {
			boolean existe = false;
			int jMax = max.size();
			for (int j = 0; j < jMax; j++) {
				if (min.get(i).equals(max.get(j))) { // El elemento A[i] Se encontro en B[j]
					max.remove(j);
					if (this.intentosComparacion)
						this.lstIguales.add(min.get(i));

					existe = true;
					break;
				}
			}// fin J

			if (!existe && this.intentosComparacion)
				lstDiferencia.add(min.get(i));
		}// fin I

		this.lstDiferencia.addAll(max);

		if (generarArchivo) {
			this.archivo.EscribirGenerico(this.lstDiferencia, "D:/pruebaConciliacion/diferencia/diferencia");
			this.archivo.EscribirGenerico(this.lstIguales, "D:/pruebaConciliacion/iguales/iguales");
		}

	}

	/**
	 * Generar la ultima comparacion de dos listas la del BDV con el producto de las diferencias mas el factor de los iguales
	 * 
	 */
	public void Conciliar() {
		int iDiff = this.lstDiferencia.size();

		if (iDiff > 0) {
			BDV Bdv = new BDV();

			Bdv.start();
			while (Bdv.isAlive()) {
				// Esperando Finalizar
			}
			this.lstBdv = Bdv.Lista();
			System.out.println("lstBdv : " + lstBdv.size());
			Diferencia(this.lstDiferencia, this.lstBdv);

			this.intentosComparacion = false;
			Diferencia(this.lstDiferencia, this.lstIguales);

			Operaciones operacion = new Operaciones();
			operacion.Salvar(this.lstDiferencia);
			System.out.println("fecha : " + this.Fecha);
//			operacion.AnularPorItem(this.Fecha, null);

		} else {
			System.out.println("Debe realizar la carga de la diferencia (CargarDiferencia)");
		}
	}

	public List<String> ListaDiff() {
		return this.lstDiferencia;
	}

	/**
	 * 
	 */
	public void ReportarAnulaciones(String fecha, String id) {
		Operaciones operacion = new Operaciones();
		operacion.AnularPorItem(fecha, id);
	}


//	public void respaldarArchivo() {
//
//		Date fechaSistema = new Date();
//		SimpleDateFormat formato = new SimpleDateFormat("ddMMyyyy-HHmmss");
//		String fecha = formato.format(fechaSistema);
//		obtenerParametros();
//		
//		Path origenPath = FileSystems.getDefault().getPath(parametrosMenudeBCV.get(ConstantesGenerales.RUTA_CONCILIACION) + parametrosMenudeBCV.get(ConstantesGenerales.NOMBRE_ARCH_ANULADAS));
//		Path destinoPath = FileSystems.getDefault().getPath(parametrosMenudeBCV.get(ConstantesGenerales.RUTA_CONCILIACION_RESP) + "iguales" + fecha + ".txt");
//		
//		Path origenPath1 = FileSystems.getDefault().getPath(parametrosMenudeBCV.get(ConstantesGenerales.RUTA_CONCILIACION) + parametrosMenudeBCV.get(ConstantesGenerales.NOMBRE_ARCH_RESP_ANULADAS));
//		Path destinoPath1 = FileSystems.getDefault().getPath(parametrosMenudeBCV.get(ConstantesGenerales.RUTA_CONCILIACION_RESP) + "Diferencia" + fecha + ".txt");
//			
//		try {
//			Files.move(origenPath, destinoPath, StandardCopyOption.REPLACE_EXISTING);
//			Files.deleteIfExists(origenPath);
//			Files.move(origenPath1, destinoPath1, StandardCopyOption.REPLACE_EXISTING);
//			Files.deleteIfExists(origenPath1);
//		} catch (IOException e) {
//			System.out.println("Conciliacion : respaldarArchivo() " + e);
//		}
//
//	}
	public void respaldarArchivo() throws Exception {

		Date fechaSistema = new Date();
		SimpleDateFormat formato = new SimpleDateFormat("ddMMyyyy-HHmmss");
		String fecha = formato.format(fechaSistema);

//		Path origenPath = //FileSystems.getDefault().getPath(parametros.get(ConstantesGenerales.RUTA_INVETARIO) + parametros.get(ConstantesGenerales.RUTA_ARCHIVO_INVETARIO) + ".txt");
//		System.out.println("origenPath : " + origenPath);
//		Path destinoPath = FileSystems.getDefault().getPath(parametros.get(ConstantesGenerales.RUTA_INVETARIO_RESP) + "Inventario" + fecha + ".txt");
//		System.out.println("destinoPath : " + destinoPath);
		File pruba = new File(parametrosMenudeBCV.get(ConstantesGenerales.RUTA_CONCILIACION) + parametrosMenudeBCV.get(ConstantesGenerales.NOMBRE_ARCH_ANULADAS));
		File prubaRes = new File(parametrosMenudeBCV.get(ConstantesGenerales.RUTA_CONCILIACION_RESP) + "iguales" + fecha + ".txt");
		Logger.info(this, "pruba" + pruba);
		Logger.info(this, "prubaRes" + prubaRes);
		try {
			
//			Files.move(origenPath, destinoPath, StandardCopyOption.REPLACE_EXISTING);
			FileUtil.copiarArchivo(pruba,prubaRes);
			FileUtil.delete(parametrosMenudeBCV.get(ConstantesGenerales.RUTA_CONCILIACION) + parametrosMenudeBCV.get(ConstantesGenerales.NOMBRE_ARCH_ANULADAS));
		} catch (IOException e) {
			System.out.println("Configuracion : respaldarArchivo() " + e);
			Logger.error(this, "Configuracion :  respaldarArchivo() " + e);
		}

	}

	protected void obtenerParametros() {
		
		try{
			DataSource dso = db.getDataSource(AppProperties.getProperty(ConstantesGenerales.DATASOURCE_PRINCIPAL_INFI));
			ParametrosDAO parametrosDAO = new ParametrosDAO(dso);
			parametrosMenudeBCV = parametrosDAO.buscarParametros(ParametrosSistema.INTERFACE_MENUDEO);
			
		}catch (Exception e) {
			
			System.out.println("Conciliacion : obtenerParametros() " + e);
		}
		
	}
}
