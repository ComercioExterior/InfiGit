package models.bcv.intervencion_operacion;

import java.util.Calendar;
import java.util.Date;
import org.bcv.serviceINTERVENCION.IntervencionActiva;
import megasoft.DataSet;
import megasoft.Logger;
import models.msc_utilitys.*;
import com.bdv.infi.dao.CredencialesDAO;
import com.bdv.infi.dao.IntervencionDAO;
import com.bdv.infi.logic.interfaces.ConstantesGenerales;
import com.bdv.infi.model.intervencion.IntervencionActivas;
import com.bdv.infi.model.intervencion.Sesion;

public class Browse extends MSCModelExtend {

	private DataSet datosFilter = new DataSet();
	CredencialesDAO credencialesDAO = null;
	DataSet _credenciales = new DataSet();
	String codBcv1 = "";
	String tasaCambio1 = "";
	String saldoDisponible1 = "";
	IntervencionDAO intervencionDao;
	public void execute() throws Exception {

		String fecha = null;
		String codBcv = null;
		String tasaCambio = null;
		String saldoDisponible = null;
		fecha = (String) _record.getValue("fecha");
		iniciar_datos_sql();
		datosFilter.addNew();
		datosFilter.setValue("fecha", fecha);

		Calendar fecha2 = Calendar.getInstance();
		int año = fecha2.get(Calendar.YEAR);
		int mes = fecha2.get(Calendar.MONTH);
		int dia = fecha2.get(Calendar.DAY_OF_MONTH);
		String pruebafecha = dia + "/" + (mes + 1) + "/" + año;

		Date fechahoy = ConstantesGenerales.dateFormatter.parse(ConstantesGenerales.dateFormatter.format(new Date()));

		try {

			Sesion login = new Sesion();
			String token = login.ObtenerToken(ConstantesGenerales.INICIO_SESSION);
			IntervencionActivas ac = new IntervencionActivas();
			IntervencionActiva[] lcs = ac.Jornadas("", token);
			for (IntervencionActiva intervencionActiva : lcs) {

				Date FechaFin = ConstantesGenerales.dateFormatter.parse(intervencionActiva.getFechaFin());		
				Date FechaInicio = ConstantesGenerales.dateFormatter.parse(intervencionActiva.getFechaInicio());
		
				if (FechaInicio.before(fechahoy) || FechaInicio.equals(fechahoy)) {
					// if(FechaFin.after(fechahoy) || FechaFin.equals(fechahoy))
					// {
					if (intervencionActiva.getTipoIntervencion().getNombreTipoIntervencion().equals("ORDINARIA")) {
						codBcv = String.valueOf(intervencionActiva.getCoVentaBCV());
						tasaCambio = String.valueOf(intervencionActiva.getTipoCambioIntervencion().get(0).getTipoCambio());
						saldoDisponible = String.valueOf(intervencionActiva.getSaldoDisponible());
					}
					// }

				}

			}
			if (codBcv.equals(null)) {
				codBcv = "No tienes Intervencion Activa";
			}
			this.intervencionDao = new IntervencionDAO(_dso);
			intervencionDao.listarMonedas();
			storeDataSet("moneda", intervencionDao.getDataSet());

			datosFilter.setValue("codbcv", String.valueOf(codBcv));
			datosFilter.setValue("tasacambio", String.valueOf(tasaCambio));
			datosFilter.setValue("saldodisponible", String.valueOf(saldoDisponible));
			storeDataSet("datosFilter", datosFilter);
		} catch (Exception e) {
			datosFilter.setValue("codbcv", String.valueOf("Intervencion no activa"));
			datosFilter.setValue("tasacambio", String.valueOf("0"));
			datosFilter.setValue("saldodisponible", String.valueOf("0"));
			storeDataSet("datosFilter", datosFilter);
			this.intervencionDao = new IntervencionDAO(_dso);
			intervencionDao.listarMonedas();
			storeDataSet("moneda", intervencionDao.getDataSet());
			System.out.println("Ha ocurrido un error al momento de enviar, revise los datos " + e.getLocalizedMessage());
			Logger.error(this, "Ha ocurrido un error al momento de enviar, revise los datos " + e.getLocalizedMessage());
		}

	}

	public String[] campos_datos() {
		String Campos[] = { "fecha", "codbcv", "tasacambio", "saldodisponible" };
		return Campos;
	}

	public void iniciar_datos_sql() {
		String Campos[] = campos_datos();
		int cant = Campos.length;
		for (int i = 0; i < cant; i++) {
			datosFilter.append(Campos[i], java.sql.Types.VARCHAR);
		}
	}

	@Override
	public boolean isValid() throws Exception {
		boolean valido = true;
		try {

		} catch (NumberFormatException e) {
			_record.addError("Error: ", "Debe Introducir un número valido");
			return false;
		}

		return valido;
	}
}