package models.bcv.intervencion_anulacion;

import java.io.FileInputStream;
import java.util.Date;
import com.bdv.infi.dao.IntervencionDAO;
import com.bdv.infi.dao.OrdenDAO;
import com.bdv.infi.dao.OrdenesCrucesDAO;
import com.bdv.infi.dao.ProcesosDAO;
import com.bdv.infi.dao.UsuarioDAO;
import com.bdv.infi.data.Proceso;
import com.bdv.infi.logic.Transaccion;
import com.bdv.infi.logic.interfaces.TransaccionNegocio;
import com.bdv.infi.util.Utilitario;
import megasoft.DataSet;
import megasoft.db;
import org.apache.log4j.Logger;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

public class LeerarchivoIntervencion extends Transaccion {

	Proceso proceso = null;
	ProcesosDAO procesosDAO = null;
	private Logger logger = Logger.getLogger(LeerarchivoIntervencion.class);
	OrdenesCrucesDAO ordenesCrucesDAO;
	HSSFCell idOperacion = null;
	private DataSet datos = new DataSet();
	private IntervencionDAO inter;
	public String Errores = "";
	int noRegistrada = 0;
	int idUsuario = 0;

	public void execute() throws Exception {
		leer();
		datos.append("texto", java.sql.Types.VARCHAR);
		datos.addNew();
		datos.setValue("texto", this.Errores);
		storeDataSet("datos", datos);
	}

	private void leer() {
		try {
			iniciarProceso();
			String contenidoDocumento = getSessionObject("contenidoDocumento").toString();
			inter = new IntervencionDAO(_dso);
			FileInputStream documento = new FileInputStream(contenidoDocumento);
			HSSFWorkbook libro = new HSSFWorkbook(documento);
			HSSFSheet hoja = libro.getSheetAt(0);
			int numFila = hoja.getLastRowNum();
			HSSFRow fila;
			for (int a = 4; a <= numFila; a++) {

				fila = hoja.getRow(a);

				idOperacion = fila.getCell((short) 0);
				if (fila != null) {
					boolean valido = validacionDeCampos(idOperacion.toString());

					if (valido) {
						if (inter.verificarEstatusAnulada(idOperacion.toString().trim())) {

							try {
								String update = inter.modificarEstatusAnuacion(idOperacion.toString().trim());
								db.exec(_dso, update.toString());
							} catch (Exception e) {
								capturaError(e);
								continue;
							}
						} else {
							Errores += "Esta operación ya fue anulada : " + idOperacion.toString() + "\n";
						}

					}

				}
			}
			documento.close();

			if (noRegistrada == 0) {
				Errores += "Todos los registros fueron anulados.";
				proceso.agregarDescripcionError("Todas las operaciones fueron anuladas");
			} else {
				proceso.agregarDescripcionError("Operaciones fallidas :" + noRegistrada + " : " + Errores);
			}

		} catch (Exception e) {
			System.out.println("LeerarchivoAnulacionIntervencion : leer()" + e);
			logger.error("LeerarchivoAnulacionIntervencion : leer()" + e);
			proceso.agregarDescripcionError("Operaciones fallidas validar el archivo : " + e);
		} finally {
			finalizarProceso();
		}

	}

	private boolean validacionDeCampos(String idOperacion) {
		boolean validar = true;
		if (idOperacion.equals("") || idOperacion.equals(null)) {
			Errores += "Esta vacio el campo id : " + idOperacion.toString() + "\n";
			validar = false;
		}
		return validar;

	}

	private void capturaError(Exception e) {
		String err = "";
		if (e.getMessage().contains("too many values")) {
			err = "Favor volver a cargar esta operacion y cambiar las celdas que tengas comas por punto : id :" + idOperacion;
		} else {
			err = e.toString() + " Id  : " + idOperacion;
		}
		Errores += err + "\n";
		noRegistrada++;
	}

	protected void iniciarProceso() throws Exception {

		UsuarioDAO usuarioDAO = new UsuarioDAO(_dso);
		idUsuario = Integer.parseInt((usuarioDAO.idUserSession(getUserName())));
		procesosDAO = new ProcesosDAO(_dso);
		proceso = new Proceso();
		int secuenciaProcesos = Integer.parseInt(OrdenDAO.dbGetSequence(_dso, com.bdv.infi.logic.interfaces.ConstantesGenerales.SECUENCIA_PROCESOS));
		proceso.setEjecucionId(secuenciaProcesos);
		proceso.setFechaInicio(new Date());
		proceso.setFechaValor(new Date());
		proceso.setTransaId(TransaccionNegocio.INTERVENCION_ANULACIONES_INTER);
		proceso.setUsuarioId(this.idUsuario);

		String queryProceso = procesosDAO.insertar(proceso);
		db.exec(_dso, queryProceso);
	}

	private void finalizarProceso() {
		try {
			String queryProcesoCerrar = procesosDAO.modificar(proceso);
			db.exec(_dso, queryProcesoCerrar);
		} catch (Exception e) {
			logger.error("LeerarchivoAnulacionIntervencion : finalizarProceso()" + e);
			System.out.println("LeerarchivoAnulacionIntervencion : finalizarProceso()" + e);

		}

	}

}
