//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : INFI-SITME
//  @ File Name : MensajeDAO.java
//  @ Date : 08/02/2011
//  @ Author : 
//
//

package com.bdv.infi.dao;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import javax.sql.DataSource;

import megasoft.DataSet;
import megasoft.db;

import org.apache.log4j.Logger;

import com.bdv.infi.logic.interfaces.ConstantesGenerales;
import com.bdv.infi.logic.interfaces.TransaccionNegocio;
import com.bdv.infi.logic.interfaz_varias.FactoryMensaje;
import com.bdv.infi.logic.interfaz_varias.Mensaje;
import com.bdv.infi.logic.interfaz_varias.MensajeBcv;
import com.bdv.infi.logic.interfaz_varias.MensajeCarmen;
import com.bdv.infi.logic.interfaz_varias.MensajeEstadistica;
import com.bdv.infi.util.Utilitario;

public class MensajeDAO extends GenericoDAO {
	
	public static final String OPERACION_ENTRADA = "ENTRADA"; 
	public static final String OPERACION_SALIDA = "SALIDA";
	private Logger logger = Logger.getLogger(MensajeDAO.class);
	
	public MensajeDAO(DataSource ds) {
		super(ds);
	}

	/**
	 * Ingresa el mensaje en la base de datos
	 * 
	 * @param mensaje
	 *            mensaje que debe ser guardado
	 * @return un conjunto de consultas insert que deben ejecutarse en la base de datos
	 * @throws Exception
	 *             en caso de error
	 */
	public String[] ingresar(Mensaje mensaje) throws Exception {
		ArrayList<String> consultas = new ArrayList<String>();
		String id = dbGetSequence(this.dataSource, ConstantesGenerales.SECUENCIA_MENSAJE);
		mensaje.setId(Integer.parseInt(id));
		String sql = "insert into infi_tb_218_mensaje (mensaje_id,fecha_creado,fecha_valor,usuario_nm,ejecucion_id,ordene_id,tipo_mensaje)" + " values (" + mensaje.getId() + ",sysdate," + this.formatearFechaBD(mensaje.getFechaValor()) + ",'" + mensaje.getUsuarioNM() + "'," + mensaje.getEjecucionId() + "," + mensaje.getOrdeneId() + ",'" + mensaje.getTipoMensaje() + "')";
		consultas.add(sql);
		guardarDetalles(mensaje, consultas);
		System.out.println("ingresar "+sql.toString());
		return (String[]) consultas.toArray(new String[consultas.size()]);
		
	}

	/**
	 * Guarda el detalle del mensaje
	 * 
	 * @param mensaje
	 *            mensaje que contiene el detalle
	 * @param consultas
	 *            array de consultas sql que se usara para almacenar las consultas insert de detalles
	 * @throws Exception
	 *             en caso de error
	 */
	private void guardarDetalles(Mensaje mensaje, ArrayList<String> consultas) throws Exception {
		HashMap<String, String> detalles = mensaje.getDetalle();
		Iterator<String> it = detalles.keySet().iterator();
		int idDetalle = 0;
		String clave = "";
		while (it.hasNext()) {
			clave = (String) it.next(); 			
			if (mensaje.get(clave)!=null && !mensaje.get(clave).equals("")) {
				idDetalle = Integer.parseInt(dbGetSequence(this.dataSource, ConstantesGenerales.SECUENCIA_MENSAJE_DETALLE));
				String sql = "insert into infi_tb_219_mensaje_detalle (mensaje_id,mensaje_id_detalle,clave_campo,valor_campo) " + " values (" + mensaje.getId() + "," + idDetalle + ",'" + clave + "','" + mensaje.get(clave) + "')";
				consultas.add(sql);
				System.out.println("guardarDetalles "+sql);
			}
		}
	}

	/** Establece los valores por defecto de los campos del mensaje 
	 * */
	public void estableceValoresPorDefecto(Mensaje mensaje) throws Exception {
		HashMap<String, String> valoresPorDefecto = new HashMap<String, String>();
		ParametrosDAO parametros = new ParametrosDAO(this.dataSource);
		valoresPorDefecto = parametros.buscarParametros(mensaje.getTipoMensaje());
		mensaje.setHashMap(valoresPorDefecto);
	}

	/**
	 * Lista de mensajes por enviar
	 * @param tipoMensaje tipo de mensaje a consultar
	 * @param tipoOperacion tipo de operación a buscar, ENTRADA o SALIDA
	 * @param listaMensajes lista de id de mensajes a enviar
	 * @return ArrayList con la lista de mensajes por enviar
	 * @throws Exception en caso de error
	 */
	private List<Mensaje> listarMensajesPorEnviarPrivado(String tipoMensaje, String tipoOperacion, String[] idMensajes) throws Exception {
		StringBuilder sql = new StringBuilder();
		if (tipoOperacion != null){
			sql.append("select * from (");
		}
		sql.append("select mensaje_id,to_char(fecha_creado,'dd/mm/yyyy') fecha_creado,to_char(fecha_envio,'dd/mm/yyyy') fecha_envio,to_char(fecha_valor,'dd/mm/yyyy') fecha_valor,usuario_nm,msg.ejecucion_id,msg.ordene_id,tipo_mensaje,decode(transa_id,'VENTA_TITULOS','SALIDA','PACTO_RECOMPRA','SALIDA','SALIDA_EXTERNA','SALIDA','CARGA_INICIAL','ENTRADA','ENTRADA_TITULO','ENTRADA','TOMA_ORDEN','ENTRADA') operacion, transa_id from infi_tb_218_mensaje msg, infi_tb_204_ordenes ord where msg.ordene_id = ord.ordene_id and fecha_envio is null and tipo_mensaje='" + tipoMensaje + "'");
				
		if (tipoOperacion != null){
			sql.append(") where OPERACION='" + tipoOperacion + "'");
		}
		
		//Lista de id de mensajes
		if (idMensajes != null){
			sql.append(" and mensaje_id in(");
			for (int i=0; i < idMensajes.length; i++) {
				sql.append(idMensajes[i]);
				if (i != idMensajes.length -1){
					sql.append(",");
				}
			}
			sql.append(")");
		}
		//System.out.println("query " + sql.toString());
		DataSet ds = db.get(this.dataSource, sql.toString());
		
		ArrayList<Mensaje> listaMensaje = new ArrayList<Mensaje>();
		Mensaje mensaje = null;
		while (ds.next()){
			mensaje = FactoryMensaje.getMensaje(tipoMensaje);
			mensaje.setId(Integer.parseInt(ds.getValue("mensaje_id")));
			mensaje.setFechaCreado((Utilitario.StringToDate(ds.getValue("fecha_creado"), ConstantesGenerales.FORMATO_FECHA2)));
			mensaje.setFechaValor(Utilitario.StringToDate(ds.getValue("fecha_valor"), ConstantesGenerales.FORMATO_FECHA2));
			mensaje.setUsuarioNM(ds.getValue("usuario_nm"));			
			mensaje.setEjecucionId(Integer.parseInt(ds.getValue("ejecucion_id")));
			mensaje.setOrdeneId(Integer.parseInt(ds.getValue("ordene_id")));
			getDetalles(mensaje);
			listaMensaje.add(mensaje);
		}		
		return listaMensaje;
	}
	
	/**
	 * Lista de mensajes por enviar
	 * @param tipoMensaje tipo de mensaje a consultar
	 * @return ArrayList con la lista de mensajes por enviar
	 * @throws Exception en caso de error
	 */
	public List<Mensaje> listarMensajesPorEnviar(String tipoMensaje) throws Exception {
		return listarMensajesPorEnviarPrivado(tipoMensaje,null,null);
	}
	
	/**
	 * Lista de mensajes por enviar
	 * @param tipoMensaje tipo de mensaje a consultar
	 * @param idMensajes id de mensajes que se desean enviar
	 * @return ArrayList con la lista de mensajes por enviar
	 * @throws Exception en caso de error
	 */	
	public List<Mensaje> listarMensajesPorEnviar(String tipoMensaje, String[] idMensajes) throws Exception {
		return listarMensajesPorEnviarPrivado(tipoMensaje,null,idMensajes);
	}
	
	/**
	 * Lista de mensajes por enviar
	 * @param tipoMensaje tipo de mensaje a consultar
	 * @param tipoOperacion tipo de operación. Indica si es de ENTRADA o de SALIDA
	 * @return ArrayList con la lista de mensajes por enviar
	 * @throws Exception en caso de error
	 */		
	public List<Mensaje> listarMensajesPorEnviar(String tipoMensaje,String tipoOperacion) throws Exception {
		return listarMensajesPorEnviarPrivado(tipoMensaje,tipoOperacion,null);
	}
	
	/**
	 * Lista de mensajes por enviar
	 * @param tipoMensaje tipo de mensaje a consultar
	 * @param tipoOperacion tipo de operación. Indica si es de ENTRADA o de SALIDA
 	 * @param idMensajes id de mensajes que se desean enviar
	 * @return ArrayList con la lista de mensajes por enviar
	 * @throws Exception en caso de error
	 */		
	public List<Mensaje> listarMensajesPorEnviar(String tipoMensaje,String tipoOperacion,String[] idMensajes) throws Exception {
		return listarMensajesPorEnviarPrivado(tipoMensaje,tipoOperacion,idMensajes);
	}	
	
	/**
	 * Obtiene los detalles del mensaje
	 * @throws Exception en caso de error
	 */
	private void getDetalles(Mensaje mensaje) throws Exception{
		String sql = "select * from infi_tb_219_mensaje_detalle where mensaje_id=" + mensaje.getId();
		DataSet ds = db.get(this.dataSource, sql);
		while (ds.next()){
			mensaje.set(ds.getValue("clave_campo"), ds.getValue("valor_campo"));
		}
	}

	/**
	 * Marca la lista de mensajes recibidos como enviados
	 * @param listaMensajes lista de mensajes que se desea marcar como enviado
	 * @return lista de consultas sql de actualización
	 */
	public String[] marcarMensajesEnviados(List<Mensaje> listaMensajes, int idEjecucion) {		
		String[] consultas = new String[listaMensajes.size()];
		int i=0;
		for (Mensaje mensaje : listaMensajes) {
			consultas[i] = "UPDATE INFI_TB_218_MENSAJE SET FECHA_ENVIO=SYSDATE,EJECUCION_ID=" + idEjecucion + " WHERE MENSAJE_ID=" + mensaje.getId();
			i++;
			
		}
		return 	consultas;
	}

	/**
	 * Elimina Mensajes que NO hayan sido enviados que pertenezcan a una orden específica 
	 * @param idOrden
	 * @return arreglo con sentencias a ejecutar
	 */
	public String eliminarMensajesPorIdOrden(int idOrden) {		
		//Se eliminan solo los mensajes NO ENVIADOS
		//Eliminar MENSAJES de la Orden: Se BORRARA el DETALLE EN CASCADA EN LA BD de la tabla 219
		 StringBuilder sql = new StringBuilder("DELETE FROM INFI_TB_218_MENSAJE WHERE ORDENE_ID = ");
		sql.append(idOrden).append(" AND FECHA_ENVIO is NULL ");
		
		return sql.toString();
	}

	@Override
	public Object moveNext() throws Exception {
		return null;
	}

	/**
	 * Lista los mensajes para interfaces segun los criterios enviados por parámetro
	 * @param fechaCreadoDesde
	 * @param fechaCreadoHasta
	 * @param enviado: indicador de mensaje enviado o No enviado
	 * @param tipoMensaje
	 * @throws Exception
	 */
	public void listarMensajes(String fechaCreadoDesde, String fechaCreadoHasta, String enviado, String tipoMensaje, int paginaAMostrar, int registroPorPagina) throws Exception {
		
		StringBuffer sql = new StringBuffer("SELECT m.*, decode(observacion,null,'','E') error, o.transa_id, c.client_nombre, decode(m.FECHA_ENVIO,null,'No Enviado','Enviado') as status_mensaje, decode(m.FECHA_ENVIO,null,'','disabled') as envio ");
		sql.append(" FROM INFI_TB_218_MENSAJE m, INFI_TB_204_ORDENES o, INFI_TB_201_CTES c ");
		
		sql.append(" WHERE m.ordene_id = o.ordene_id ");
		sql.append(" AND o.client_id = c.client_id");
		
		if(enviado.equals("0")){//No enviados
			sql.append(" AND m.FECHA_ENVIO is null ");
		}else{//enviados
			sql.append(" AND m.FECHA_ENVIO is NOT null ");
		}
		
		if(tipoMensaje != null){
			if (tipoMensaje.equals(MensajeCarmen.TIPO_MENSAJE + MensajeCarmen.ENTRADA)){				
				sql.append(" AND o.TRANSA_ID in('").append(TransaccionNegocio.TOMA_DE_ORDEN)
				.append("','").append(TransaccionNegocio.ENTRADA_DE_TITULOS)
				.append("')")
				.append(" AND m.TIPO_MENSAJE = '").append(MensajeCarmen.TIPO_MENSAJE).append("'");
			}else if (tipoMensaje.equals(MensajeCarmen.TIPO_MENSAJE + MensajeCarmen.SALIDA)){
				sql.append(" AND o.TRANSA_ID in('").append(TransaccionNegocio.VENTA_TITULOS).append("','")
				.append(TransaccionNegocio.SALIDA_EXTERNA).append("','")
				.append(TransaccionNegocio.PACTO_RECOMPRA).append("')")
				.append(" AND m.TIPO_MENSAJE = '").append(MensajeCarmen.TIPO_MENSAJE).append("'");
			}else{
				sql.append(" AND m.TIPO_MENSAJE = '").append(tipoMensaje).append("'");	
			}			
		}
		
		if(fechaCreadoDesde!=null && fechaCreadoHasta!=null){
			sql.append(" AND trunc(m.FECHA_CREADO) BETWEEN to_date('").append(fechaCreadoDesde).append("','").append(ConstantesGenerales.FORMATO_FECHA).append("')");
			sql.append(" AND to_date('").append(fechaCreadoHasta).append("','").append(ConstantesGenerales.FORMATO_FECHA).append("')");
		}
		
		sql.append("ORDER BY m.mensaje_id desc");
		
		getTotalDeRegistros(sql.toString());
		dataSet = obtenerDataSetPaginado(sql.toString(),paginaAMostrar,registroPorPagina);
	}
	
	/**
	 * Arma DataSet con los tipos de mensajes definidos
	 * @return
	 * @throws Exception
	 */
	public DataSet listarTiposMensaje() throws Exception{
		DataSet tipos_mensaje = new DataSet();
		
		//Columnas
		tipos_mensaje.append("tipo_mensaje_id", java.sql.Types.VARCHAR);
		tipos_mensaje.append("tipo_mensaje_desc", java.sql.Types.VARCHAR);		
		//Filas
		tipos_mensaje.addNew();
		tipos_mensaje.setValue("tipo_mensaje_id", MensajeBcv.TIPO_MENSAJE);
		tipos_mensaje.setValue("tipo_mensaje_desc", "BCV");

		tipos_mensaje.addNew();
		tipos_mensaje.setValue("tipo_mensaje_id", MensajeCarmen.TIPO_MENSAJE + MensajeCarmen.ENTRADA);
		tipos_mensaje.setValue("tipo_mensaje_desc", "Carmen Entrada");
		
		tipos_mensaje.addNew();
		tipos_mensaje.setValue("tipo_mensaje_id", MensajeCarmen.TIPO_MENSAJE + MensajeCarmen.SALIDA);
		tipos_mensaje.setValue("tipo_mensaje_desc", "Carmen Salida");		
		
		tipos_mensaje.addNew();
		tipos_mensaje.setValue("tipo_mensaje_id", MensajeEstadistica.TIPO_MENSAJE);
		tipos_mensaje.setValue("tipo_mensaje_desc", "Estad&iacute;stica");
						
		return tipos_mensaje;			
	}
	
	/**
	 * Lista el detalle de un mensaje almacenando todos sus campos en un dataset
	 * @param mensajeId
	 * @throws Exception
	 */
	public void listarDetalleMensaje(long mensajeId) throws Exception{
		
		StringBuffer sql = new StringBuffer("SELECT * FROM INFI_TB_219_MENSAJE_DETALLE ");
		sql.append(" WHERE mensaje_id = ").append(mensajeId);
		
		dataSet = db.get(dataSource, sql.toString());
	}
	
	/**
	 * Lista información del mensaje almacenando
	 * @param mensajeId id del mensaje a consultar
	 * @throws Exception
	 */	
	public void listarMensaje(long mensajeId) throws Exception{
		
		StringBuffer sql = new StringBuffer("SELECT * FROM INFI_TB_218_MENSAJE ");
		sql.append(" WHERE mensaje_id = ").append(mensajeId);
		
		dataSet = db.get(dataSource, sql.toString());
	}
	

	/**
	 * Carga títulos en Carmen - Entrada y Salida de títulos
	 * @param tipo tipo de mensaje a cargar (MENSAJE_CARMEN-ENTRADA"
	 * @param idMensajes id de mensajes que se deben enviar según el tipo
	 */
	public void cargaTitulosCarmen(String tipo, String idMensajes) throws Exception{		
		Connection conn      = dataSource.getConnection();	
		long tmp= System.currentTimeMillis();		
		logger.info("Entrada de Títulos Carmen -> cargaTitulosCarmen");		
		
		try {
			CallableStatement stm = conn.prepareCall("{call CARGAR_TITULOS_CARMEN(?,?)}");
			stm.setString(1, tipo);
			stm.setString(2, idMensajes);			
			stm.execute();
			logger.info("cargaTitulosCarmen------ejecucion exitosa");
		} catch (Exception e) {
			logger.error("Error cargaTitulosCarmen :"+e.getMessage());
			throw e;
		}		
		logger.info("Entrada de Títulos Carmen: "+(System.currentTimeMillis()-tmp)+ " msegs");
	}
	
	public String agregarObservacion(long msjId,String observacion,String tipoMesaje)throws Exception {
		
		System.out.println("Ingreso a metodo agregarObservacion");
		StringBuffer sql=new StringBuffer();		
		sql.append("UPDATE INFI_TB_218_MENSAJE MSJ SET MSJ.OBSERVACION='"+observacion+"' WHERE MSJ.TIPO_MENSAJE='"+tipoMesaje+"' AND MSJ.MENSAJE_ID=").append(msjId);
		System.out.println("SENTENCIA " + sql.toString());
		return sql.toString();
		
	}
}
