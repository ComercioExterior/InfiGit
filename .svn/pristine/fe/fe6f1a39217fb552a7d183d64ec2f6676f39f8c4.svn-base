package models.bcv.mesas_lectura;

import java.io.FileInputStream;
import java.util.Date;
import java.util.HashMap;
import javax.sql.DataSource;
import megasoft.DataSet;
import megasoft.Logger;
import megasoft.db;
import com.bdv.infi.dao.MesaCambioDAO;
import com.bdv.infi.dao.OrdenDAO;
import com.bdv.infi.dao.ParametrosDAO;
import com.bdv.infi.dao.ProcesosDAO;
import com.bdv.infi.dao.UsuarioDAO;
import com.bdv.infi.data.Proceso;
import com.bdv.infi.logic.Transaccion;
import com.bdv.infi.logic.interfaces.ParametrosSistema;
import com.bdv.infi.logic.interfaces.TransaccionNegocio;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

public class LeerarchivoMenudeo extends Transaccion {
	protected HashMap<String, String> parametrosMesa;
	public static final String SEPARADOR = ",";

	MesaCambioDAO operaciones;
	private ProcesosDAO procesosDAO;
	private Proceso proceso;
	private int secuenciaProcesos = 0;
	String tipoTransaccion = TransaccionNegocio.MESA_LECTURA_ARCHIVO;
	int idUsuario = 0;
	int noRegistrada = 0;
	public String Errores = "";
	private DataSet datos = new DataSet();

	HSSFCell tipoOperacion = null;
	HSSFCell tipoPersona = null;
	HSSFCell cedulaRif = null;
	HSSFCell nombreCliente = null;
	HSSFCell cuentaMondedaNacional = null;
	HSSFCell cuentaMondedaExtranjera = null;
	HSSFCell tipoPacto = null;
	HSSFCell codigoDivisas = null;
	HSSFCell montoPactoBase = null;
	HSSFCell montoContraValor = null;
	HSSFCell tasaCambio = null;
	HSSFCell codigoBanco = null;
	HSSFCell idMonedaExtranjera = null;
	HSSFCell comision = null;

	public void execute() throws Exception {
		leerCarga();
		datos.append("texto", java.sql.Types.VARCHAR);
		datos.addNew();
		datos.setValue("texto", this.Errores);
		storeDataSet("datos", datos);

	}

	/**
	 * metodo para crear un ciclo con fecha y usuario ejecutando el proceso.
	 * 
	 * @throws Exception
	 */
	protected void iniciarProceso() throws Exception {

		UsuarioDAO usuarioDAO = new UsuarioDAO(_dso);
		idUsuario = Integer.parseInt((usuarioDAO.idUserSession(getUserName())));
		Logger.info(this, "INICIO DE PROCESO");
		procesosDAO = new ProcesosDAO(_dso);
		proceso = new Proceso();
		secuenciaProcesos = Integer.parseInt(OrdenDAO.dbGetSequence(_dso, com.bdv.infi.logic.interfaces.ConstantesGenerales.SECUENCIA_PROCESOS));
		proceso.setEjecucionId(secuenciaProcesos);
		proceso.setFechaInicio(new Date());
		proceso.setFechaValor(new Date());
		proceso.setTransaId(tipoTransaccion);
		proceso.setUsuarioId(this.idUsuario);

		String queryProceso = procesosDAO.insertar(proceso);
		db.exec(_dso, queryProceso);
	}

	private void finalizarProceso() {
		try {
			String queryProcesoCerrar = procesosDAO.modificar(proceso);
			db.exec(_dso, queryProcesoCerrar);
			Logger.info(this, "FIN DE PROCESO: " + new Date());

		} catch (Exception e) {
			Logger.error(this, "LecturaCargaMesa : finalizarProceso()" + e);
			System.out.println("LecturaCargaMesa : finalizarProceso()" + e);

		}

	}

	private void leerCarga() {
		try {
			obtenerParametros(_dso);
			String rif = parametrosMesa.get(ParametrosSistema.RIF_BDV);
			String nombre = parametrosMesa.get(ParametrosSistema.NOMBRE_BDV);
			String cuentaMe = parametrosMesa.get(ParametrosSistema.CUENTA_MN);
			String cuentaMn = parametrosMesa.get(ParametrosSistema.CUENTA_ME);
			iniciarProceso();
			String contenidoDocumento = getSessionObject("contenidoDocumento").toString();
			FileInputStream documento = new FileInputStream(contenidoDocumento);
			HSSFWorkbook libro = new HSSFWorkbook(documento);
			HSSFSheet hoja = libro.getSheetAt(0);
			int numFila = hoja.getLastRowNum();
			HSSFRow fila;
			Integer idContadorMe = 0;
			operaciones = new MesaCambioDAO(_dso);
			for (int a = 4; a <= numFila; a++) {

				fila = hoja.getRow(a);
				if (fila != null) {

					tipoOperacion = fila.getCell((short) 0);
					tipoPersona = fila.getCell((short) 1);
					cedulaRif = fila.getCell((short) 2);
					nombreCliente = fila.getCell((short) 3);
					cuentaMondedaNacional = fila.getCell((short) 4);
					cuentaMondedaExtranjera = fila.getCell((short) 5);
					tipoPacto = fila.getCell((short) 6);
					codigoDivisas = fila.getCell((short) 7);
					montoPactoBase = fila.getCell((short) 8);
					montoContraValor = fila.getCell((short) 9);
					tasaCambio = fila.getCell((short) 10);
					codigoBanco = fila.getCell((short) 11);
					idMonedaExtranjera = fila.getCell((short) 12);
					comision = fila.getCell((short) 13);

				}

				boolean valido = validacionDeCampos(tipoOperacion.toString(), tipoPersona.toString(), cedulaRif.toString(), nombreCliente.toString(), cuentaMondedaNacional.toString(), cuentaMondedaExtranjera.toString(), tipoPacto.toString(), codigoDivisas.toString(), montoPactoBase.toString(), montoContraValor.toString(), tasaCambio.toString(), codigoBanco.toString().trim(), comision.toString());
				try {

					if (valido) {
						if (tipoOperacion.toString().equalsIgnoreCase("V")) {
							operaciones.InsertarTransacciones(idMonedaExtranjera.toString(), tipoOperacion.toString(), montoPactoBase.toString(), montoContraValor.toString(), tasaCambio.toString(), comision.toString(), rif.substring(0, 1), rif.substring(1), nombre, cuentaMn, cuentaMe, tipoPersona.toString(), cedulaRif.toString(), nombreCliente.toString(), cuentaMondedaNacional.toString(),
									cuentaMondedaExtranjera.toString(), codigoDivisas.toString(), montoPactoBase.toString(), montoContraValor.toString(), tipoPacto.toString());
						} else {
							operaciones.InsertarTransacciones(idMonedaExtranjera.toString(), tipoOperacion.toString(), montoPactoBase.toString(), montoContraValor.toString(), tasaCambio.toString(), comision.toString(), tipoPersona.toString(), cedulaRif.toString(), nombreCliente.toString(), cuentaMondedaNacional.toString(), cuentaMondedaExtranjera.toString(), rif.substring(0, 1), rif.substring(1),
									nombre, cuentaMn, cuentaMe, codigoDivisas.toString(), montoPactoBase.toString(), montoContraValor.toString(), tipoPacto.toString());
						}
					}
				} catch (Exception e) {
					capturaError(e);
				}

			}
			documento.close();
			Logger.info(this, "Contador :" + idContadorMe);
			System.out.println("Contador :" + idContadorMe);
			if (noRegistrada == 0) {
				proceso.agregarDescripcionError("Todo las operaciones fueron agregadas");
				Errores = "Todas las operaciones fueron cargadas exitosamente. ";
			} else {
				proceso.agregarDescripcionError("Operaciones fallidas :" + noRegistrada + " : " + Errores);
			}

		} catch (Exception e) {
			System.out.println("LecturaCargaMesa : leerCarga() " + e);
			Logger.error(this, "LecturaCargaMesa : leerCarga() " + e);
			noRegistrada++;
		} finally {
			finalizarProceso();

		}
	}

	private boolean validacionDeCampos(String tipoOperacion, String tipoPersona, String cedulaRif, String nombreCliente, String cuentaMondedaNacional, String cuentaMondedaExtranjera, String tipoPacto, String codigoDivisas, String montoPactoBase, String montContraValor, String tasaCambio, String codigoBanco, String comision) {

		boolean validar = true;
		if (tipoOperacion.equals("") || tipoOperacion.equals(null)) {
			Errores += "Esta vacio el campo tipoOperacion, Cliente : " + nombreCliente.toString() + "\n";
			validar = false;
		}
		if (tipoPersona.equals("") || tipoPersona.equals(null)) {
			Errores += "Esta vacio el campo tipoPersona, Cliente : " + nombreCliente.toString() + "\n";
			validar = false;
		}
		if (cedulaRif.equals("") || cedulaRif.equals(null)) {
			Errores += "Esta vacio el campo cedulaRif, Cliente : " + nombreCliente.toString() + "\n";
			validar = false;
		}
		if (nombreCliente.equals("") || nombreCliente.equals(null)) {
			Errores += "Esta vacio el campo nombreCliente, Cliente : " + nombreCliente.toString() + "\n";
			validar = false;
		}
		if (cuentaMondedaNacional.equals("") || cuentaMondedaNacional.equals(null)) {
			Errores += "Esta vacio el campo cuentaMondedaNacional, Cliente : " + nombreCliente.toString() + "\n";
			validar = false;
		}
		if (cuentaMondedaExtranjera.equals("") || cuentaMondedaExtranjera.equals(null)) {
			Errores += "Esta vacio el campo tipoPacto, Cliente : " + nombreCliente.toString() + "\n";
			validar = false;
		}
		if (tipoPacto.equals("") || tipoPacto.equals(null)) {
			Errores += "Esta vacio el campo tipoPacto, Cliente : " + nombreCliente.toString() + "\n";
			validar = false;
		}
		if (codigoDivisas.equals("") || codigoDivisas.equals(null)) {
			Errores += "Esta vacio el campo codigo codigoDivisas, Cliente : " + nombreCliente.toString() + "\n";
			validar = false;
		}
		if (montoPactoBase.equals("") || montoPactoBase.equals(null)) {
			Errores += "Esta vacio el campo montoPactoBase, Cliente : " + nombreCliente.toString() + "\n";
			validar = false;
		}

		if (montContraValor.equals("") || montContraValor.equals(null)) {
			Errores += "Esta vacio el campo montContraValor, Cliente : " + nombreCliente.toString() + "\n";
			validar = false;
		}

		if (tasaCambio.equals("") || tasaCambio.equals(null)) {
			Errores += "Esta vacio el campo tasaCambio, Cliente : " + nombreCliente.toString() + "\n";
			validar = false;
		}
		if (codigoBanco.equals("") || codigoBanco.equals(null)) {
			Errores += "Esta vacio el campo codigoBanco, Cliente : " + nombreCliente.toString() + "\n";
			validar = false;
		}
		if (comision.equals("") || comision.equals(null)) {
			Errores += "Esta vacio el campo comision, Cliente : " + nombreCliente.toString() + "\n";
			validar = false;
		}

		return validar;

	}

	private void capturaError(Exception e) {
		String err = "";
		if (e.getMessage().contains("unique constraint")) {
			err = "Ya fue registrado la operacion :" + tipoPersona + "-" + cedulaRif + ", Id :" + idMonedaExtranjera;
		} else if (e.getMessage().contains("too many values")) {
			err = "Favor volver a cargar esta operacion y cambiar las celdas que tengas comas por punto :" + tipoPersona + "-" + cedulaRif + ", Id Moneda extranjera :" + idMonedaExtranjera;
		} else {
			err = e.toString().substring(64, 200) + "Id Moneda extranjera : " + idMonedaExtranjera;
			// err = e.toString()+ "Id Moneda extranjera : " + idMonedaExtranjera;

		}

		Errores += err + "\n";
		noRegistrada++;
	}

	protected void obtenerParametros(DataSource _dso) throws Exception {
		ParametrosDAO parametrosDAO = new ParametrosDAO(_dso);
		parametrosMesa = parametrosDAO.buscarParametros(ParametrosSistema.INTERFACE_BDV);
	}
}
