//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : INFI-SITME
//  @ File Name : Mensaje.java
//  @ Date : 08/02/2011
//  @ Author : 
//
//

package com.bdv.infi.logic.interfaz_varias;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;

import javax.sql.DataSource;

import com.bdv.infi.dao.ParametrosDAO;
import com.bdv.infi.logic.interfaces.ParametrosSistema;
import com.bdv.infi.util.Utilitario;

import megasoft.Logger;

public abstract class Mensaje {
	private int id;
	private Date fechaCreado;
	private Date fechaEnvio;
	private Date fechaValor;
	private String usuarioNM;
	private int ejecucionId;
	private int ordeneId;
	private String tipoMensaje;
	public final String VALOR_VACIO = "";
	protected LinkedHashMap<String,String> valores = new LinkedHashMap<String,String>();
    private final SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");

    private DecimalFormat nf = new DecimalFormat("###.00");

	protected Mensaje(String tipoMensaje){
		this.fechaCreado = new Date();
		this.fechaEnvio = new Date();
		this.fechaValor = new Date();
		this.tipoMensaje = tipoMensaje;
	}	
	
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}
	

	public void setFechaCreado(Date fechaCreado) {
		this.fechaCreado = fechaCreado;
	}

	public Date getFechaCreado() {
		return this.fechaCreado;
	}

	public Date getFechaEnvio() {
		return this.fechaEnvio;
	
	}

	public void setFechaEnvio(Date fechaEnvio) {
		this.fechaEnvio = fechaEnvio;
	}

	public String getUsuarioNM() {
		return this.usuarioNM;

	}

	public void setUsuarioNM(String usuarioNM) {
		this.usuarioNM = usuarioNM;
	}

	public int getEjecucionId() {
		return this.ejecucionId;

	}

	public void setEjecucionId(int ejecucionId) {
		this.ejecucionId = ejecucionId;
	}

	public int getOrdeneId() {
		return this.ordeneId;

	}

	public void setOrdeneId(int ordeneId) {
		this.ordeneId = ordeneId;
	}

	public String getTipoMensaje() {
		return this.tipoMensaje;

	}

	public void set(String clave, String valor) {
		this.valores.put(clave, valor);
	}
	
	public void set(String clave, int valor) {
		this.valores.put(clave, String.valueOf(valor));
	}
	
	public void set(String clave, long valor) {
		this.valores.put(clave, String.valueOf(valor));
	}

	
	/**
	 * Asigna a la clave una fecha con el formato AAAAMMDD
	 * @param clave parámetro
	 * @param fecha fecha que se asignará al parámetro
	 */
	public void set(String clave, Date fecha) {
		this.valores.put(clave, sdf.format(fecha));
	}

	public void set(String clave, Double numero) {
		/*String numeroString = String.valueOf(numero).replace(".","");
		numeroString = numeroString.replace(",","");*/
		this.valores.put(clave, String.valueOf(nf.format(numero)));
	}	

	public void setHashMap(HashMap<String,String> claveValor) throws Exception {
		Iterator<String> it = claveValor.keySet().iterator();
		String clave = "";
		String valor = "";
		while (it.hasNext()){
			clave = it.next();
			valor = claveValor.get(clave);
			this.set(clave, valor);
		}
	}
	
	/**
	 * Formatea el número con dos decimales
	 * @param numero número a formatear
	 * @return número formateado
	 */
	protected String formatearNumeroConReemplazo(String numero){
		Logger.debug(this, "Formateando... " + numero);		
		if(numero!=null && !numero.equals("")){
			numero = numero.replace(",", ".");
			numero = String.valueOf(nf.format(Double.parseDouble(numero))).replace(".","").replace(",", "");
		}
		return numero;
	}
	
	/**
	 * Formatea el número con la cantidad de decimales indicados por parámetro
	 * @param numero : numero a formatear
	 * @param numDecimales : cantidad de decimales
	 * @return String con el número formateado
	 */
	protected String formatearNumeroConReemplazo(String numero, int numDecimales){
		Logger.debug(this, "Formateando... " + numero);
				
		DecimalFormat df = Utilitario.crearMascaraDecimales(numDecimales);
		
		if(numero!=null && !numero.equals("")){
			numero = numero.replace(",", ".");//se colocan "." para poder parsear a Double				
			numero = String.valueOf(df.format(Double.parseDouble(numero))).replace(".","").replace(",", "");
		}
		return numero;
	}

	public String get(String clave) {
		return (String) this.valores.get(clave);

	}

	public HashMap<String,String> getDetalle() {
		return this.valores;

	}

	public void setFechaValor(Date fecha) {
		this.fechaValor = fecha;
	}

	public Date getFechaValor() {
		return this.fechaValor;
	}
	
	/**
	 * Establece los valores de los campos a la longitud correcta dependiendo del mensaje
	 * @throws Exception 
	 */
	protected abstract void formatearCampos() throws Exception;
	
	/**Obtiene los campos en forma lineal y con formato para poder escribirlos en el archivo txt
	 * @throws Exception */
	public String obtenerLinea() throws Exception{
		StringBuilder sb = new StringBuilder();
		formatearCampos();
		for (String clave : this.getDetalle().keySet()) {
			sb.append(this.get(clave));
		}
		return sb.toString();
	}
	
	public String toString(){
		StringBuilder sb = new StringBuilder();
		sb.append("---------Inicio del mensaje-----\n");
		sb.append("Mensaje id: ").append(this.id).append("\n");
		sb.append("--------tipo: ").append(this.tipoMensaje).append("\n");
		sb.append("--------fecha creado: ").append(this.fechaCreado).append("\n");
		sb.append("Detalles->\n");
		Iterator<String> it = valores.keySet().iterator();
		String clave = "";
		while (it.hasNext()) {
			clave = (String) it.next();
			sb.append("Campo->").append(clave).append("=").append(valores.get(clave)).append("\n");
		}
		sb.append("---------Fin del mensaje-----\n");
	return sb.toString();
	}
	
	/** Consulta los valores por defecto de los campos del mensaje 
	 * */
	public HashMap<String, String> obtenerValoresPorDefecto(DataSource dso, String tipoMensaje) throws Exception {
		HashMap<String, String> valoresPorDefecto = new HashMap<String, String>();
		ParametrosDAO parametros = new ParametrosDAO(dso);
		valoresPorDefecto = parametros.buscarParametros(tipoMensaje);
		return valoresPorDefecto;
	}
	
	/**
	 * Obtiene el código del cliente registrado en CARMEN perteneciente a la contraparte de BDV
	 * 
	 * @return código registrado en INFI
	 * @throws Exception en caso de error
	 */
	@SuppressWarnings("unused")
	public int obtenerCodigoClienteContraparteBDV(DataSource dso) throws Exception {
		int customerNumberBDV=0;
			String codigo = ParametrosDAO.listarParametros(ParametrosSistema.CUSTOMER_NUMBER_BDV, dso);
			if (codigo != null && !codigo.equals("")) {
				customerNumberBDV = Integer.parseInt(codigo);
			}		
		return customerNumberBDV;
	}
}
